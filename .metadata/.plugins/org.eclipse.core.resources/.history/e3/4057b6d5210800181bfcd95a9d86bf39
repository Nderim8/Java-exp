import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Board extends JPanel implements KeyListener {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -5490067921878284212L;
	private BufferedImage blocks, background;
	private final int blockSize = 30;
	private final int boardWidth = 10, boardHeight = 20;
	private int[][] board = new int[boardHeight][boardWidth];
	
	private Shape[] shapes = new Shape[7];
	private Shape currentShape;                
	private Shape comingShape;
	
	private Timer timer;
	private final int FPS = 60;
	private final int delay = 1000/FPS;
	private boolean gameOver = false;
	private int score = 0;
	
	public Board(){
		
		try {
			blocks = ImageIO.read(Board.class.getResource("/tiles.png"));
			background = ImageIO.read(Board.class.getResource("/background.png"));
			
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		// timer
		timer = new Timer(delay, new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				
				update();
				repaint();
				
			}
			
			
		});
		
		// start timer
		timer.start();
		
		///// SHAPES
		// I shape
		shapes[0] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), 
				new int[][] { { 1, 1, 1, 1 } }, this, 1);

		// Z shape
		shapes[1] = new Shape(blocks.getSubimage(blockSize, 0, blockSize, blockSize),
				new int[][] { { 1, 1, 0 },
			                  { 0, 1, 1 } }, this, 2);
		// S shape
		shapes[2] = new Shape(blocks.getSubimage(blockSize*2, 0, blockSize, blockSize),
				new int[][] { { 0, 1, 1 },
			                  { 1, 1, 0 } }, this, 3);		
		// J shape
		shapes[3] = new Shape(blocks.getSubimage(blockSize*3, 0, blockSize, blockSize),
				new int[][] { { 1, 1, 1 },
					          { 0, 0, 1 } }, this, 4);
		// L shape
		shapes[4] = new Shape(blocks.getSubimage(blockSize*4, 0, blockSize, blockSize),
				new int[][] { { 1, 1, 1 },
							  { 1, 0, 0 } }, this, 5);
		// T shape
		shapes[5] = new Shape(blocks.getSubimage(blockSize*5, 0, blockSize, blockSize),
				new int[][] { { 1, 1, 1 },
							  { 0, 1, 0 } }, this, 6);
		// O shape
		shapes[6] = new Shape(blocks.getSubimage(blockSize*6, 0, blockSize, blockSize),
				new int[][] { { 1, 1 },
							  { 1, 1 } }, this, 7);
		
		// set next shape
		  setNextShape();
	
	}
	
	public void update() {
		
		currentShape.update();
		
		if(gameOver)
			timer.stop();
		
	}
	
	public void paintComponent(Graphics g) {
		
		super.paintComponent(g);
//		//draw backgroud
//		g.drawImage(background, 0, 0, null);
		
		currentShape.render(g);	
		comingShape.render(g);
		
		for(int row = 0; row < board.length; row++)
			for(int col = 0; col < board[row].length; col++)
				if(board[row][col] != 0)
					g.drawImage(blocks.getSubimage((board[row][col]-1)*blockSize, 0, blockSize, blockSize), col*blockSize, row*blockSize, null);
		
//		// draw horizontal lines
//		for(int i = 0; i < boardHeight; i++) {
//			
//			g.drawLine(0, i*blockSize, boardWidth*blockSize, i*blockSize);
//			
//		}
//		// draw vertical lines
//		for(int j = 0; j < boardWidth; j++) {
//					
//			g.drawLine(j*blockSize, 0, j*blockSize, boardHeight*blockSize);
//					
//		}
		
	
		
		g.setColor(Color.BLUE);
		g.setFont(new Font("Arial", Font.PLAIN, 20));
		g.drawString("SCORE : " + score, 90, 25);
		
		if(gameOver)
		{
			g.setColor(Color.BLACK);
			g.setFont(new Font("Arial", Font.PLAIN, 40));
			g.drawString("Game Over!", 40, 300);
		}
		
	}
	
	public void setNextShape() {
		int index = (int) (Math.random()*shapes.length);
		
		if(comingShape == null && currentShape == null)
		{
			comingShape = new Shape(shapes[index].getBlock(), shapes[index].getCoords(), this, shapes[index].getColor());
			currentShape = new Shape(shapes[index].getBlock(), shapes[index].getCoords(), this, shapes[index].getColor());
			
		}
		else {
			
			currentShape =  comingShape;
			comingShape = new Shape(shapes[index].getBlock(), shapes[index].getCoords(), this, shapes[index].getColor());

		}
			
		for(int row = 0; row < currentShape.getCoords().length; row++)
			for(int col = 0; col < currentShape.getCoords().length; col++)
				if(currentShape.getCoords()[row][col] != 0) {
					if(board[row][col+3] != 0)
						gameOver = true;
				}
		
	}
	
	public int getBlockSize() {
		return blockSize;
	}
	public int[][] getBoard() {
		return board;
	}
	public int getScore() {
		return score;
	}
    public void setScore(int score) {
    	this.score = score;
    }
	
	@Override
	public void keyPressed(KeyEvent e) {
		
		if(e.getKeyCode() == KeyEvent.VK_LEFT) {
			
			currentShape.setDeltaX(-1);
		}
        if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
			
			currentShape.setDeltaX(1);
		}
        if(e.getKeyCode() == KeyEvent.VK_DOWN) {
			
			currentShape.speedDown();;
		}
        if(e.getKeyCode() == KeyEvent.VK_SPACE) {
			
			currentShape.speedDown2X();
		}
        if(e.getKeyCode() == KeyEvent.VK_UP) {
			
			currentShape.rotate();
		}
        
	}

	@Override
	public void keyReleased(KeyEvent e) {
	
		if (e.getKeyCode() == KeyEvent.VK_DOWN) {

			currentShape.normalSpeed();
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE) {

			currentShape.normalSpeed();
		}
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		
		
	}


	

}












